generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                 @id @default(uuid())
  email          String                 @unique
  name           String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  celphone       String                 @unique
  cpf            String                 @unique
  dateOfBirth    DateTime
  password_hash  String
  role           Role
  closedCashiers Cashier[]              @relation("CashierClosedBy")
  openedCashiers Cashier[]              @relation("CashierOpenedBy")
  establishments UserOnEstablishments[]
}

model Customer {
  id            String    @id @default(uuid())
  celphone      String    @unique
  email         String    @unique
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cpf           String    @unique
  dateOfBirth   DateTime?
  password_hash String
  addresses     Address[]
  orders        Order[]
}

model UserOnEstablishments {
  userId          String
  establishmentId String
  role            Role
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@id([userId, establishmentId])
}

model PaymentMethod {
  id             String          @id @default(uuid())
  name           String          @unique
  code           String          @unique
  icon           String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  payments       Payment[]
  establishments Establishment[] @relation("EstablishmentToPaymentMethod")
}

model Cashier {
  id              String        @id @default(uuid())
  establishmentId String
  openedAt        DateTime      @default(now())
  closedAt        DateTime?
  status          CashierStatus @default(OPEN)
  initialAmount   Int           @default(0)
  finalAmount     Int?
  notes           String?
  lastOrderNumber Int           @default(0)
  openedById      String
  closedById      String?
  closedBy        User?         @relation("CashierClosedBy", fields: [closedById], references: [id])
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  openedBy        User          @relation("CashierOpenedBy", fields: [openedById], references: [id])
  orders          Order[]

  @@index([establishmentId, status])
  @@index([openedAt])
}

model Establishment {
  id             String                 @id @default(uuid())
  name           String
  phone          String?
  address        String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  banners        Banner[]
  Cashier        Cashier[]
  categories     Category[]
  orders         Order[]
  products       Product[]
  users          UserOnEstablishments[]
  paymentMethods PaymentMethod[]        @relation("EstablishmentToPaymentMethod")
}

model Banner {
  id              String        @id @default(uuid())
  label           String
  imageUrl        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  categories      Category[]
}

model Category {
  id              String        @id @default(uuid())
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bannerId        String?
  establishmentId String
  banner          Banner?       @relation(fields: [bannerId], references: [id])
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  products        Product[]
  optionGroups    OptionGroup[]

  @@index([bannerId])
}

model OptionGroup {
  id                  String               @id @default(uuid())
  name                String
  categoryId          String
  pricingModel        PricingModel?        @default(ADDITIVE)
  options             Option[]
  productOptionGroups ProductOptionGroup[]
  category            Category             @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@map("option_groups")
}

model Option {
  id               String            @id @default(uuid())
  name             String
  optionGroupId    String
  basePrice        Int               @default(0)
  optionGroup      OptionGroup       @relation(fields: [optionGroupId], references: [id])
  orderItemOptions OrderItemOption[]
  productOptions   ProductOption[]
}

model Product {
  id                  String               @id @default(uuid())
  name                String
  description         String
  price               Int                  @default(0)
  stock               Int?
  isFeatured          Boolean              @default(false)
  isArchived          Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  categoryId          String
  establishmentId     String
  image               String?
  orderItems          OrderItem[]
  category            Category             @relation(fields: [categoryId], references: [id])
  establishment       Establishment        @relation(fields: [establishmentId], references: [id])
  productOptions      ProductOption[]
  productOptionGroups ProductOptionGroup[]
}

model ProductOptionGroup {
  id            String        @id @default(uuid())
  productId     String
  optionGroupId String
  minSelect     Int           @default(0)
  maxSelect     Int           @default(1)
  isRequired    Boolean       @default(true)
  pricingModel  PricingModel?
  upgradePrice  Int?
  optionGroup   OptionGroup   @relation(fields: [optionGroupId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])

  @@unique([productId, optionGroupId])
}

model ProductOption {
  id        String  @id @default(uuid())
  productId String
  optionId  String
  price     Int
  option    Option  @relation(fields: [optionId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, optionId])
}

model Order {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  isPaid            Boolean       @default(false)
  customerId        String
  establishmentId   String
  deliveryAddressId String?
  status            String
  observations      String?
  cashierId         String
  orderNumber       Int
  Cashier           Cashier       @relation(fields: [cashierId], references: [id])
  customer          Customer      @relation(fields: [customerId], references: [id])
  deliveryAddress   Address?      @relation(fields: [deliveryAddressId], references: [id])
  establishment     Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  items             OrderItem[]
  payment           Payment?
}

model OrderItem {
  id           String            @id @default(uuid())
  orderId      String
  productId    String
  price        Int
  quantity     Int
  observations String?
  order        Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product           @relation(fields: [productId], references: [id])
  options      OrderItemOption[]
}

model OrderItemOption {
  id          String    @id @default(uuid())
  orderItemId String
  optionId    String
  price       Decimal
  option      Option    @relation(fields: [optionId], references: [id])
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String        @id @default(uuid())
  status          String
  paidAt          DateTime?
  orderId         String        @unique
  amount          Int
  createdAt       DateTime      @default(now())
  paymentMethodId String
  transactionId   String?
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}

model Address {
  id         String   @id @default(uuid())
  name       String?
  zip        String?
  address    String
  number     String
  complement String?
  district   String?
  city       String
  state      String
  isActive   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  orders     Order[]
}

enum Role {
  PLATFORM_ADMIN
  STORE_OWNER
  STAFF
  DELIVERY
}

enum CashierStatus {
  OPEN
  CLOSED
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  COMPLETED
  CANCELLED
}

enum PricingModel {
  ADDITIVE
  HIGHEST_PRICE
  FIXED_UPGRADE
}
