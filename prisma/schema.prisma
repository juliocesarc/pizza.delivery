generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Billboard {
  id         String     @id @default(uuid())
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
}

model Category {
  id          String     @id @default(uuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  billboardId String?
  billboard   Billboard? @relation(fields: [billboardId], references: [id])
  flavors     Flavor[]
  products    Product[]

  @@index([billboardId])
}

model Flavor {
  id                 String              @id @default(uuid())
  name               String
  categoryId         String
  category           Category            @relation(fields: [categoryId], references: [id])
  flavorToOrderItems FlavorToOrderItem[]
}

model FlavorToOrderItem {
  id          String    @id @default(uuid())
  flavorId    String
  orderItemId String
  flavor      Flavor    @relation(fields: [flavorId], references: [id])
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Decimal
  stock       Int?
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  String
  maxFlavors  Int         @default(1)
  minFlavors  Int         @default(1)
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
}

model Order {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  isPaid    Boolean     @default(false)
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id                 String              @id @default(uuid())
  orderId            String
  productId          String
  createdAt          DateTime            @default(now())
  price              Decimal
  quantity           Int
  size               String
  updatedAt          DateTime            @updatedAt
  flavorToOrderItems FlavorToOrderItem[]
  order              Order               @relation(fields: [orderId], references: [id])
  product            Product             @relation(fields: [productId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  celphone  String   @unique
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}
